@using Integracja.Server.Web.Models.DodajPytania
@using Integracja.Server.Web.Models.Shared.Question
@model DodajPytaniaViewModel

@{
    ViewData["Title"] = "View";
}

<script src="~/js/DodajPytania.js"></script>
<script src="~/js/_Question.js"></script>

<h1>Dodaj pytania</h1>
<br />

<div class="row">

    @*wybór i dodawanie kategorii*@
    <div class="col-md-3">
        <h2>Kategorie</h2>
        <br />

        @*tabela z przeglądem kategorii i możliwością wyboru*@
        <div class="input-group">
            <div class="form-outline">
                <input type="search" placeholder="Nazwa kategorii" class="form-control" />
            </div>
            <button type="button" class="btn btn-primary">
                <i class="bi bi-search"></i>
            </button>
        </div>
        <br />

        <div class="table-wrapper-scroll-y scrollbar-secondary">
            <table class="table table-bordered table-striped table-sm ">
                <thead>
                    <tr>
                        <th scope="col">Nazwa</th>
                        <th scope="col">Ilość pytań</th>

                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Categories.Count; i++)
                    {
                        <tr>
                            <td>
                                @{
                                    string formId = DodajPytaniaViewModel.CategoryReadFormId(Model.Categories[i].Id);
                                }
                                <form id="@formId" asp-action="@DodajPytaniaViewModel.ActionNames.CategoryRead" asp-controller="DodajPytania" novalidate>
                                    <button type="button" class="btn btn-light" value="@formId" onclick="categoryReadScript(this)">
                                        @Model.Categories[i].Name
                                    </button>
                                    <input type="hidden" asp-for="Category.Id" value="@Model.Categories[i].Id" />
                                </form>
                            </td>
                            <td>@Model.Categories[i].QuestionsCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @*dodawanie kategorii*@
        <form id="@DodajPytaniaViewModel.CategoryCreateFormId" asp-action="@DodajPytaniaViewModel.ActionNames.CategoryCreate" asp-controller="DodajPytania">
            <div class="form-group">
                <input asp-for="Category.Name" placeholder="Nazwa twojej kategorii" />
                <span asp-validation-for="Category.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" onclick="categoryCreateScript()">
                    Dodaj kategorię
                </button>
            </div>
        </form>

    </div>

    @*tworzenie pytania*@
    <div class="col-md-7">
        @{ await Html.RenderPartialAsync("~/Views/Shared/_Question.cshtml", Model.QuestionViewModel); }
    </div>

    @* wrzucanie tych funkcji do plików .js oznacza że muszą też przyjmować jako parametry zmienne które są tu z modelu *@
    <script type="text/javascript">

        saveQuestionForm = function(callback) {
            return $.ajax({
                type: "POST",
                url: "@Url.Action(DodajPytaniaViewModel.ActionNames.SaveQuestionForm)",
                data: $("#@QuestionViewModel.FormId").serialize(),
                success: callback
            });
        }

        categoryReadScript = function(element) {
            saveQuestionForm(function() {
                $("#" + element.value).submit();
            });
        }

        categoryCreateScript = function() {
            saveQuestionForm(function() {
                $("#@DodajPytaniaViewModel.CategoryCreateFormId").submit();
            });
        }

    </script>

</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
